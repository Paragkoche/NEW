generator client {
  provider = "prisma-client-js"
  output   = "../src/db/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model Product {
  id            Int     @id @default(autoincrement())
  name          String
  shadow        Boolean
  autoRotate    Boolean
  rotationSpeed Int

  envId Int?
  env   Env? @relation(fields: [envId], references: [id])

  bgsId Int?
  bgs   Bgs? @relation(fields: [bgsId], references: [id])

  models Model[]
}

model Bgs {
  id    Int    @id @default(autoincrement())
  color String

  products Product[]
}

model Env {
  id           Int    @id @default(autoincrement())
  name         String
  url          String
  thumbnailUrl String

  products Product[]
}

model Model {
  id           Int     @id @default(autoincrement())
  isDefault    Boolean
  thumbnailUrl String
  url          String

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  Mash Mash[]
}

model Mash {
  id            Int     @id @default(autoincrement())
  itOptional    Boolean
  textureEnable Boolean
  thumbnailUrl  String?
  url           String?

  model   Model? @relation(fields: [modelId], references: [id])
  modelId Int?

  variants MashVariant[]
  fabrics  FabricRange[]
}

model MashVariant {
  id   Int    @id @default(autoincrement())
  name String

  mashId Int
  mash   Mash @relation(fields: [mashId], references: [id])
}

model Fabric {
  id           Int    @id @default(autoincrement())
  url          String
  thumbnailUrl String
  size         String

  fabricRanges FabricRange[]
}

model FabricRange {
  id   Int    @id @default(autoincrement())
  name String

  fabricId Int
  fabric   Fabric @relation(fields: [fabricId], references: [id])

  mashId Int
  mash   Mash @relation(fields: [mashId], references: [id])
}
